version: '3'
services:

    mysql:
        container_name: mysql
        image: mysql:5.7
        restart: always
        hostname: mysql
        environment:
            MYSQL_DATABASE: 'vendas'
            MYSQL_USER: 'vendas'
            MYSQL_PASSWORD: 'vendas123'
            MYSQL_ROOT_PASSWORD: 'vendas123'
        ports:
            - 3307:3306
        expose:
            - "3307"

    redis:
        container_name: redis
        image: redis
        restart: always
        hostname: redis
        ports:
            - 6379:6379
        expose:
            - 6379

    config:
        container_name: config
        image: viniciusferrarini/config:1.0
        restart: always
        environment:
            URI: 'https://github.com/viniciusferrarini/microservices.git'
        ports:
            - 8888:8888
        expose:
            - 8888

    discovery:
        container_name: discovery
        image: viniciusferrarini/discovery:1.0
        restart: always
        environment:
            CONFIG_SERVER_URL: 'http://config:8888'
        ports:
            - 8761:8761
        expose:
            - 8761
        depends_on:
            - config

    produtos:
        container_name: produtos
        image: viniciusferrarini/produtos:1.0
        restart: always
        environment:
            CONFIG_SERVER_URL: 'http://config:8888'
            EUREKA_URL: 'http://discovery:8761/eureka/'
            JMS_URL: 'tcp://jms:61616'
            ZIPKIN_URL: 'http://trace:9411/'
        ports:
            - 8081:8081
        depends_on:
            - config
            - discovery
            - jms
            - prometheus

    cupons:
        container_name: cupons
        image: viniciusferrarini/cupons:1.0
        restart: always
        environment:
            CONFIG_SERVER_URL: 'http://config:8888'
            EUREKA_URL: 'http://discovery:8761/eureka/'
            JMS_URL: 'tcp://jms:61616'
            ZIPKIN_URL: 'http://trace:9411/'
            REDIS_HOST: 'redis'
        ports:
            - 8083:8083
        depends_on:
            - config
            - discovery
            - prometheus

    vendas:
        container_name: vendas
        image: viniciusferrarini/vendas:1.0
        restart: always
        environment:
            CONFIG_SERVER_URL: 'http://config:8888'
            EUREKA_URL: 'http://discovery:8761/eureka/'
            JMS_URL: 'tcp://jms:61616'
            ZIPKIN_URL: 'http://trace:9411/'
            MYSQL_HOST: 'mysql'
            MYSQL_PORT: 3306
        ports:
            - 8082:8082
        depends_on:
            - config
            - discovery
            - jms
            - prometheus

    gateway:
        container_name: gateway
        image: viniciusferrarini/gateway:1.0
        restart: always
        environment:
            CONFIG_SERVER_URL: 'http://config:8888'
            EUREKA_URL: 'http://discovery:8761/eureka/'
        ports:
            - 8080:8080
        expose:
            - 8080
        depends_on:
            - config
            - discovery

    jms:
        container_name: jms
        image: rmohr/activemq
        restart: always
        ports:
            - 6161:61616
            - 8161:8161
        expose:
            - 6161
            - 8161

    trace:
        container_name: trace
        image: openzipkin/zipkin
        restart: always
        ports:
            - 9411:9411
        expose:
            - 9411

    prometheus:
        image: prom/prometheus:latest
        container_name: monitoring_prometheus
        restart: unless-stopped
        command:
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
        expose:
            - 9090
        ports:
            - 9090:9090

    grafana:
        image: grafana/grafana:latest
        container_name: monitoring_grafana
        restart: unless-stopped
        links:
            - prometheus:prometheus
        expose:
            - 3000
        ports:
            - 3000:3000

#    logspout:
#        image: gliderlabs/logspout:v3
#        command: 'udp://logstash:5000'
#        links:
#            - logstash
#        volumes:
#            - '/var/run/docker.sock:/tmp/docker.sock'
#        depends_on:
#            - elasticsearch
#            - logstash
#            - kibana
#
#    logstash:
#        image: logstash:2.1.1
#        environment:
#            - STDOUT=true
#        links:
#            - elasticsearch
#        depends_on:
#            - elasticsearch
#            - kibana
#        command: 'logstash -e "input { udp { port => 5000 } } output { elasticsearch { hosts => elasticsearch } }"'
#
#    kibana:
#        image: kibana:4.1.2
#        links:
#            - elasticsearch
#        environment:
#            - ELASTICSEARCH_URL=http://elasticsearch:9200
#        ports:
#            - 5601:5601
#        depends_on:
#            - elasticsearch

#    elasticsearch:
#        image: elasticsearch:1.5.2
#        ports:
#            - 9200:9200
#            - 9300:9300

    postgres:
        image: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: keycloak
            POSTGRES_PASSWORD: password
        ports:
            - 5431:5432
        expose:
            - 5431

    keycloak:
        image: jboss/keycloak:11.0.0
        container_name: keycloak
        restart: on-failure
        volumes:
            - ./realm-export.json:/tmp/keycloak/config/realm-export.json
        environment:
            DB_VENDOR: POSTGRES
            DB_ADDR: postgres
            DB_DATABASE: keycloak
            DB_USER: keycloak
            DB_SCHEMA: public
            DB_PASSWORD: password
            KEYCLOAK_USER: admin
            KEYCLOAK_PASSWORD: admin
            KEYCLOAK_IMPORT: /tmp/keycloak/config/realm-export.json
        command:
            - "-b"
            - "0.0.0.0"
            - "-Djboss.socket.binding.port-offset=10000"
        expose:
            - 18080
        ports:
            - 18080:18080
        depends_on:
            - postgres

volumes:
    postgres_data:
        driver: local
